name: Property Analysis Backend CI/CD Pipeline (Staging)

on:
  push:
    branches: [staging]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - name: Upgrade pip and Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        env:
          # ===========================================================
          # ------------------------- GENERAL -------------------------
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}

          # ------------------------- SUPERUSER -------------------------
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

          # ------------------------- DATABASE -------------------------
          # DATABASE_URL: ${{ secrets.DATABASE_URL }}

          # ------------------------- CORS -------------------------
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}

          # ------------------------- CSRF -------------------------
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}

          # ------------------------- CDN STORAGE -------------------------
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}

          # ------------------------- PAYSTACK -------------------------
          # STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          # STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          # STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          # STRIPE_ESSENTIAL_PRICE_ID: ${{ secrets.STRIPE_ESSENTIAL_PRICE_ID }}
          # STRIPE_PROFESSIONAL_PRICE_ID: ${{ secrets.STRIPE_PROFESSIONAL_PRICE_ID }}
          # STRIPE_PREMIUM_PRICE_ID: ${{ secrets.STRIPE_PREMIUM_PRICE_ID }}

          # ------------------------- TEXT PROCESSING DETAILS -------------------------
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
          MODEL_NAME: ${{ secrets.MODEL_NAME}}

          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

          # -------------------------- REDIS CONFIG ----------------------------
          REDIS_URL: ${{ secrets.REDIS_URL }}

          # -------------------------- GOOGLE AUTH ----------------------------
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          # GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}

          # -------------------------- FRONTEND CONNECTIONS ----------------------------
          # FRONTEND_BASE_URL: ${{ secrets.FRONTEND_BASE_URL }}
          # FRONTEND_CALLBACK_URL: ${{ secrets.FRONTEND_CALLBACK_URL }}
          # ===========================================================
        run: |
          python manage.py test

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/propertyanalysis:staging-${{ github.sha }},${{ secrets.DOCKER_HUB_USERNAME }}/propertyanalysis:latest

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Setup SSH Key and Add to Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg
      - name: Decrypt .env.gpg File
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: echo $GPG_PASSPHRASE | gpg --quiet --batch --yes --decrypt --passphrase-fd 0 --output ./.env ./.env.gpg
      - name: Transfer Repository to Remote Server (Including Decrypted .env)
        run: rsync -avz -e "ssh -i ~/.ssh/id_rsa" ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ubuntu/propertyanalysis/
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/propertyanalysis:staging-${{ github.sha }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKER_IMAGE
          script: |
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            cd /home/ubuntu/propertyanalysis/
            docker pull $DOCKER_IMAGE

            # Ensure scripts are executable (in case they are not already)
            chmod +x install_docker.sh
            chmod +x entrypoint.sh

            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              ./install_docker.sh
              # No need to modify PATH or logout/login; Docker should be immediately usable
            else
              echo "Docker Compose already installed."
            fi

            docker compose down
            docker compose up -d
            exit 1

  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Setup crontab for Docker cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define the cron job command with logging
            CRON_JOB="0 0 * * * /usr/bin/docker system prune -af > /var/log/docker_cleanup.log 2>&1"

            # Create a log file and set permissions (if not already exist)
            TOUCH_LOG_CMD="sudo touch /var/log/docker_cleanup.log && sudo chmod 644 /var/log/docker_cleanup.log"
            (crontab -l | grep -q "/var/log/docker_cleanup.log") || (eval "$TOUCH_LOG_CMD")

            # Check if the cleanup cron job already exists
            (crontab -l | grep -q "docker system prune") || (crontab -l 2>/dev/null; echo "$CRON_JOB") | sudo crontab -

            # Ensure the cron service is running
            sudo service cron restart

            # This cron job is scheduled to run at midnight every day, performing a Docker system prune
            # to remove unused Docker objects and logs the output to /var/log/docker_cleanup.log.

# username = melveraai  # propertyanalysisai
# repo name = propertyanalysis
# .env encrypt with propertyanalysis
